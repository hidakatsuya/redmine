# GitHub Copilot Instructions for Redmine Project

## Testing Guidelines

### Running Tests
* テストの実行方法は GitHub Actions のワークフローを参考にすること
  * https://github.com/hidakatsuya/redmine/blob/master/.github/workflows/tests.yml
  * https://github.com/hidakatsuya/redmine/blob/master/.github/actions/setup-redmine/action.yml

### Test Environment Setup
Use the following setup for testing:
```bash
# Setup database configuration for sqlite3
cat > config/database.yml <<EOF
test:
  adapter: sqlite3
  database: db/test.sqlite3
EOF

# Install dependencies
bundle config set --local path vendor/bundle
bundle install

# Setup test environment
RAILS_ENV=test bundle exec rake db:migrate
RAILS_ENV=test bundle exec rake db:fixtures:load

# Run tests
RAILS_ENV=test bundle exec rails test [test_file]
```

### Test Best Practices
* Always ensure test isolation by using `with_settings` for configuration changes
* When testing UI components that depend on settings, explicitly set required settings
* Use `with_settings :setting_name => 'value' do...end` to wrap test code that depends on specific settings
* Clean up database state between tests to avoid test interdependencies

## Redmine.org Patch Submission

### When submitting patches to redmine.org:
* redmine.org にパッチ投稿するときのチケットのタイトル・本文を pull request に記載
* この issue の対応は、最終的に redmine.org にパッチを添付した上でチケットを投稿する
* pull request に以下の情報も含めること：
  * redmine.org に投稿するチケットのタイトルと本文
  * 簡潔かつ明瞭な英文とすること

### Patch Content Requirements:
* Title should be concise and clearly describe the issue
* Description should include:
  * Clear description of the problem
  * Root cause analysis
  * Minimal reproduction steps
  * Solution explanation
  * Impact assessment

## Code Quality Guidelines

### Ruby/Rails Standards
* Follow existing code style and conventions
* Use `frozen_string_literal: true` in new files
* Maintain backward compatibility
* Keep changes minimal and focused

### Testing Standards
* Write focused, isolated tests
* Use existing test patterns and helpers
* Ensure tests are deterministic and not dependent on external factors
* Mock external dependencies appropriately

## Common Patterns

### Settings Management
```ruby
# Use with_settings for temporary setting changes in tests
with_settings :setting_name => 'value' do
  # test code here
end
```

### Database Queries
* Use ActiveRecord methods appropriately
* Consider performance implications
* Use proper indexing for queries

### View Testing
* Use `assert_select` for DOM element testing
* Be aware of different view types (board vs list) that may render different elements
* Always test with consistent settings when UI behavior depends on configuration